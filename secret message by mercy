import tkinter as tk
from tkinter import messagebox

class EncryptionTool:
    def __init__(self, root):
        self.root = root
        self.root.title("Secret Message")

        self.label_text = tk.Label(root, text="Enter Text to send to your crush:")
        self.label_text.pack()

        self.entry_text = tk.Text(root, height=10, width=80)
        self.entry_text.pack()

        self.label_key = tk.Label(root, text="Enter Encryption Key:")
        self.label_key.pack()

        self.entry_key = tk.Entry(root, show="*")
        self.entry_key.pack()

        self.button_encrypt = tk.Button(root, text="Encrypt", command=self.encrypt_text)
        self.button_encrypt.pack()

        self.button_decrypt = tk.Button(root, text="Decrypt", command=self.decrypt_text)
        self.button_decrypt.pack()

    def validate_input(self):
        text = self.entry_text.get("1.0", tk.END).strip()
        key = self.entry_key.get().strip()
        if not text or not key:
            messagebox.showerror("Error", "Please enter both text and key.")
            return None, None
        return text, key

    def encrypt_text(self):
        text, key = self.validate_input()
        if text and key:
            encrypted_text = self.encrypt(text, key)
            self.entry_text.delete("1.0", tk.END)
            self.entry_text.insert("1.0", encrypted_text)

    def decrypt_text(self):
        text, key = self.validate_input()
        if text and key:
            decrypted_text = self.decrypt(text, key)
            self.entry_text.delete("1.0", tk.END)
            self.entry_text.insert("1.0", decrypted_text)

    def encrypt(self, text, key):
        cipher_text = ""
        for i, char in enumerate(text):
            shift = ord(key[i % len(key)])  # Use each character of the key for shifting
            cipher_text += chr((ord(char) + shift) % 128)  # Use modulo to handle all characters
        return cipher_text

    def decrypt(self, text, key):
        decrypted_text = ""
        for i, char in enumerate(text):
            shift = ord(key[i % len(key)])  # Use each character of the key for shifting
            decrypted_text += chr((ord(char) - shift) % 128)  # Use modulo to handle all characters
        return decrypted_text

if __name__ == "__main__":
    root = tk.Tk()
    app = EncryptionTool(root)
    root.mainloop()
